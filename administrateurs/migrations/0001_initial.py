# Generated by Django 5.1.2 on 2024-12-07 14:37

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('type', models.CharField(choices=[('administrateur', 'ADMIN'), ('agent', 'AGENT'), ('membre', 'MEMBRE'), ('organisation', 'ORGANISATION')], default='membre', max_length=20, verbose_name="Type d'utilisateur")),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CodesReference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=10, unique=True, validators=[django.core.validators.RegexValidator(message='Code de référence invalide.', regex='^RMW-\\d{6}$')], verbose_name='Code de référence')),
                ('type', models.CharField(choices=[('administrateur', 'ADMIN'), ('agent', 'AGENT'), ('membre', 'MEMBRE'), ('organisation', 'ORGANISATION')], default='membre', max_length=20, verbose_name="Type d'utilisateur")),
                ('description', models.TextField(blank=True, max_length=255, null=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Code de référence',
                'verbose_name_plural': 'Codes de référence',
            },
        ),
        migrations.CreateModel(
            name='Communes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=45, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ContributionsMensuelles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('montant', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Montant')),
                ('devise', models.CharField(choices=[('CDF', 'CDF'), ('USD', 'USD')], default='USD', max_length=3, verbose_name='Devise')),
                ('description', models.TextField(blank=True, max_length=255, null=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Contribution mensuelle',
                'verbose_name_plural': 'Contributions mensuelles',
            },
        ),
        migrations.CreateModel(
            name='EtatsCivil',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=45, unique=True)),
            ],
            options={
                'verbose_name': 'États civils',
                'verbose_name_plural': 'États civils',
            },
        ),
        migrations.CreateModel(
            name='NumerosCompte',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero', models.CharField(max_length=15, unique=True, validators=[django.core.validators.RegexValidator(message='Numéro de compte invalide.', regex='^MW-\\d{4}-\\d{4}-\\d{2}$')], verbose_name='Numéro de compte')),
                ('devise', models.CharField(choices=[('CDF', 'CDF'), ('USD', 'USD')], max_length=3, verbose_name='Devise')),
                ('type', models.CharField(choices=[('administrateur', 'ADMIN'), ('agent', 'AGENT'), ('membre', 'MEMBRE'), ('organisation', 'ORGANISATION')], default='membre', max_length=20, verbose_name="Type d'utilisateur")),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Numéro de compte',
                'verbose_name_plural': 'Numéros de Compte',
            },
        ),
        migrations.CreateModel(
            name='Provinces',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name': 'Province',
                'verbose_name_plural': 'Provinces',
            },
        ),
        migrations.CreateModel(
            name='TypesCarteIdentite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=45, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Quartiers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=45, unique=True)),
                ('commune', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='administrateurs.communes')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Avenues',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=45, unique=True)),
                ('quartier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='administrateurs.quartiers')),
            ],
            options={
                'verbose_name': 'Avenue',
                'verbose_name_plural': 'Avenues',
            },
        ),
        migrations.CreateModel(
            name='Villes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=45, unique=True)),
                ('type', models.CharField(choices=[('Ville', 'Ville'), ('Territoire', 'Territoire')], default='Ville', max_length=45, verbose_name='Type')),
                ('province', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='administrateurs.provinces')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='communes',
            name='ville',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='administrateurs.villes'),
        ),
        migrations.CreateModel(
            name='Administrateurs',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='admin', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('nom', models.CharField(max_length=20, verbose_name='Nom')),
                ('postnom', models.CharField(max_length=20, verbose_name='Postnom')),
                ('prenom', models.CharField(blank=True, max_length=20, null=True, verbose_name='Prénom')),
                ('sexe', models.CharField(choices=[('M', 'Homme'), ('F', 'Femme')], max_length=10, verbose_name='Sexe')),
                ('lieu_naissance', models.CharField(max_length=50, verbose_name='Lieu de naissance')),
                ('date_naissance', models.DateField(verbose_name='Date de naissance')),
                ('etat_civil', models.CharField(choices=[('Célibataire', 'Célibataire'), ('Marié', 'Marié(e)'), ('Veuf', 'Veuf(ve)'), ('Divorcé', 'Divorcé(e)')], max_length=20, verbose_name='Etat civil')),
                ('type_carte_identite', models.CharField(choices=[('CNI', "Carte Nationale d'Identité"), ('Passeport', 'Passeport'), ('Permis de conduire', 'Permis de conduire'), ('Autre', 'Autre')], max_length=20, verbose_name="Type de carte d'identité")),
                ('num_carte_identite', models.CharField(max_length=50, verbose_name="Numéro de carte d'identité")),
                ('carte_identite_copy', models.ImageField(upload_to='cartes_identite/', verbose_name="Copie de la carte d'identité")),
                ('photo_profile', models.ImageField(upload_to='photo_profile/', verbose_name='Photo de profile')),
                ('numero_telephone', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='Format valide : (+243 ou 0) 996437657', regex='^(\\+243|0)\\d{9}$')], verbose_name='Numéro de téléphone')),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('date_modification', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('status', models.BooleanField(default=True)),
                ('avenue_residence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='administrateurs.avenues', verbose_name='Avenue de résidence')),
                ('commune_residence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='administrateurs.communes', verbose_name='Commune de résidence')),
                ('province_residence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='administrateurs.provinces', verbose_name='Province de résidence')),
                ('quartier_residence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='administrateurs.quartiers', verbose_name='Quartier de résidence')),
                ('reference_code', models.OneToOneField(blank=True, max_length=20, null=True, on_delete=django.db.models.deletion.CASCADE, to='administrateurs.codesreference', verbose_name='Code de référence')),
                ('ville_residence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='administrateurs.villes', verbose_name='Ville de résidence')),
            ],
            options={
                'verbose_name': 'Administrateur',
                'verbose_name_plural': 'Administrateurs',
            },
        ),
    ]
